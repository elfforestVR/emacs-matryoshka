#+TITLE: emacs
#+SETUPFILE: ./setupfiles/header.setup

* Настройка книги колдуна (*EMACS*)                                   :emacs:
Это книга колдуна в ней он пишет заклинания для строение мира в котором он живёт.
** Настройка systemd для emacs  :server:
*** Настройка сервера
:PROPERTIES:
:CUSTOM_ID: emacs_server
:header-args:bash: :tangle ~/.config/systemd/user/emacsd.service :mkdirp yes
:END:
Для включение настройки сервера надо выполнить комманды
#+begin_src 
  systemctl --user enable emacsd
  systemctl --user start emacsd
#+end_src
Посмотреть работает emacs server
#+begin_src 
  systemctl --user enable emacsd
#+end_src
#+begin_src bash
  [Unit]
  Description=Emacs: the extensible, self-documenting text editor
  Documentation=man:emacs(1) info:Emacs


  [Service]
  Type=forking
  ExecStart=/bin/emacs --daemon
  ExecStop=/bin/emacsclient --eval "(progn (setq kill-emacs-hook nil) (kill-emacs))"
  Restart=on-failure
  Environment=DISPLAY=:%i
  TimeoutStartSec=0

  [Install]
  WantedBy=default.target
#+end_src
*** Настройка клиента
:PROPERTIES:
:CUSTOM_ID: emacs_server
:header-args:bash: :tangle ~/.local/share/applications/emacs_client.desktop :mkdirp yes
:END:
#+begin_src bash
  [Desktop Entry]
  Name=Emacs (Client1)
  GenericName=Text Editor
  Comment=Edit text
  MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
  Exec=sh -c "if [ -n \\"\\$*\\" ]; then exec emacsclient --alternate-editor= --display=\\"\\$DISPLAY\\" \\"\\$@\\"; else exec emacsclient --alternate-editor= --create-frame; fi" placeholder %F
  Icon=emacs28
  Type=Application
  Terminal=false
  Categories=Development;TextEditor;
  StartupNotify=true
  StartupWMClass=Emacs
  Keywords=emacsclient;
  Actions=new-window;new-instance;

  [Desktop Action new-window]
  Name=New Window
  Exec=/usr/bin/emacsclient28 --alternate-editor= --create-frame %F

  [Desktop Action new-instance]
  Name=New Instance
  Exec=emacs %F

#+end_src 
** rss org каналы :rss:
:PROPERTIES:
:CUSTOM_ID: init
:header-args:org: :tangle ~/.emacs.d/elfeed.org :mkdirp yes
:END:

#+begin_src org :results raw silent :exports code
  ,* Blogs                                                                  :elfeed:
  ,** Новости IT                                                             :IT:
  ,*** [[https://habr.com/ru/rss/hubs/all/][habr]]
  ,** Быт дом                                                               :HOME:
  ,*** [[https://edatut.webnode.ru/rss/all.xml][Рецепты на любой вкус]]
  
#+end_src :rss:
** init.el    :init:
:PROPERTIES:
:CUSTOM_ID: init
:header-args:emacs-lisp: :tangle ~/.emacs.d/init.el :mkdirp yes
:END:
*** Запуск emacs как сервер
#+begin_src emacs-lisp :lexical no
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src
*** Пакетный мененжер
Пакетный мененжер для устоновки дополнение

#+begin_src emacs-lisp
  ;;    (require 'package)

  ;;  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  ;;  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;;  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  ;;    (package-initialize)
  ;;
  ;;    (unless (package-installed-p 'use-package )
  ;;      (package-refresh-contents)
  ;;      (package-install 'use-package))
  ;;    (eval-and-compile
  ;;      (setq use-package-always-ensure t
  ;;	    use-package-expand-minimally t))

  ;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Создать функцию =ensure-installed= для устоновки пакетов

#+begin_src emacs-lisp
    (defvar *package-lists-fetched* nil)

    (defun soft-fetch-package-lists ()
      (unless *package-lists-fetched*
	(package-refresh-contents)
	(setf *package-lists-fetched* t)))

    ;; package-installed-p will always report NIL if a newer
    ;; version is available. We do not want that.
    (defun package-locally-installed-p (package)
      (assq package package-alist))

    (defun ensure-installed (&rest packages)
      (unless (cl-loop for package in packages
		       always (package-locally-installed-p package))
	(soft-fetch-package-lists)
	(dolist (package packages)
	  (unless (package-locally-installed-p package)
	    (package-install package)))))

    ;; Disable package.el in favor of straight.el
  (setq package-enable-at-startup nil)

  ;; Install use-package
(straight-use-package 'use-package)
#+end_src
*** Настройка UI
**** Путь до настройки emacs 
#+begin_src emacs-lisp
  (setq user-emacs-directory (file-name-directory load-file-name))
#+end_src
**** подключение linux path
#+begin_src emacs-lisp
 (use-package exec-path-from-shell
  :straight t
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

#+end_src
**** xgd
#+begin_src emacs-lisp
(require 'xdg)

(setq
 VIDEOS_DIR (xdg-user-dir "VIDEOS")
 PICTURES_DIR (xdg-user-dir "PICTURES")
 MUSIC_DIR (xdg-user-dir "MUSIC")
 DOCUMENTS_DIR (xdg-user-dir "DOCUMENTS")
 PUBLICSHARE_DIR (xdg-user-dir "PUBLICSHARE")
 TEMPLATES_DIR (xdg-user-dir "TEMPLATES")
 DOWNLOAD_DIR (xdg-user-dir "DOWNLOAD")
 DESKTOP_DIR (xdg-user-dir "DESKTOP")
 USER_EMACS_DIR (file-name-directory load-file-name)
 )
  
#+end_src
**** bs
#+begin_src emacs-lisp
  ;; Buffer Selection and ibuffer settings
(require 'bs)
(require 'ibuffer)
(defalias 'list-buffers 'ibuffer) ;; отдельный список буферов при нажатии C-x C-b
(global-set-key (kbd "<f2>") 'bs-show) ;; запуск buffer selection кнопкой F2
#+end_src
**** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
  :ensure t
  :straight t
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src
**** projectile
#+begin_src emacs-lisp
  (use-package projectile
  :straight t
  :ensure t
  :bind (("s-p" . projectile-command-map)
	 ("C-c p" . projectile-command-map)))
#+end_src
**** Комментирования кода
#+begin_src emacs-lisp
  (use-package comment-dwim-2
    :straight t
    :ensure t
    :bind ("C-/" . comment-dwim-2))
#+end_src
**** Навести порядок
#+begin_src emacs-lisp
;;  (use-package no-littering
;;  :demand t
;;  :config
;;  (setq
;;   auto-save-file-name-transforms
;;   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
;;  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
;;  (when (file-exists-p custom-file)
;;    (load custom-file)))

#+end_src
**** Браузер по умолчанию
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src
**** Не спрашивать  yes/no
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Кодировка
#+begin_src emacs-lisp
  ;; Вснгда использовать UTF-8
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src
**** Вид курсора
#+begin_src emacs-lisp
  (setq-default cursor-type 'bar)
(set-cursor-color "red") 
#+end_src
**** Включите подсветку синтаксиса для всех буферов:
#+begin_src emacs-lisp
  (global-font-lock-mode t)
#+end_src
**** Увеличьте максимальное количество журналов в буфере *Messages*:
#+begin_src emacs-lisp
  (setq message-log-max 16384)
#+end_src
**** Закрытие парных скобок
#+begin_src emacs-lisp
    ;; Show-paren-mode settings
  (add-hook 'prog-mode-hook 'show-paren-mode) ;; включить выделение выражений между {},[],()
  (setq show-paren-style 'expression) ;; выделить цветом выражения между {},[],()

  ;; Electric-modes settings
  (add-hook 'prog-mode-hook  'electric-pair-mode) ;; автозакрытие {},[],() с переводом курсора внутрь скобок
  (electric-indent-mode -1) ;; отключить индентацию  electric-indent-mod'ом (default in Emacs-24.4)

#+end_src
**** Никаких графических диалогов и окон - все через минибуфер
#+begin_src emacs-lisp
  (setq use-dialog-box     nil)
#+end_src
**** Номер линии
#+begin_src emacs-lisp
    ;; Linum plugin
  (require 'linum) ;; вызвать Linum
  (line-number-mode   1) ;; показать номер строки в mode-line
  (global-linum-mode  1) ;; показывать номера строк во всех буферах
  (column-number-mode 1) ;; показать номер столбца в mode-line
  (setq linum-format "|%d") ;; задаем формат нумерации строк

  (use-package linum-off
      :straight t
      :ensure t
      :config (setq linum-disable-starred-buffers '(prog-mode)))


#+end_src
**** Показать часы в mode-line
#+begin_src emacs-lisp
  ;; Display file size/time in mode-line
(setq display-time-24hr-format t) ;; 24-часовой временной формат в mode-line
(display-time-mode             t) ;; показывать часы в mode-line
(size-indication-mode          t) ;; размер файла в %-ах
#+end_src
**** Отступы в коде
#+begin_src emacs-lisp
;; Indent settings
(setq-default indent-tabs-mode nil) ;; отключить возможность ставить отступы TAB'ом
(setq-default tab-width          4) ;; ширина табуляции - 4 пробельных символа
(setq-default c-basic-offset     4)
(setq-default standart-indent    4) ;; стандартная ширина отступа - 4 пробельных символа
(setq-default lisp-body-indent   4) ;; сдвигать Lisp-выражения на 4 пробельных символа
(global-set-key (kbd "RET") 'newline-and-indent) ;; при нажатии Enter перевести каретку и сделать отступ
(setq lisp-indent-function  'common-lisp-indent-function)

#+end_src
*** Минимальная настройка
**** Убрать всё лишнее с экрана emacs некоторые веци раздражают
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
**** сделать сочетание клавиш как в windows
Сочетание клавиш копировать и вставить как в windows

#+begin_src emacs-lisp
  (cua-mode 1)
#+end_src
**** Проверка орфографии
я всё пишу в летературном стиле и мне нужно проверять свою орфографию

#+begin_src emacs-lisp
(with-eval-after-load "ispell"
  ;; Configure `LANG`, otherwise ispell.el cannot find a 'default
  ;; dictionary' even though multiple dictionaries will be configured
  ;; in next line.
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-program-name "hunspell")
  ;; Configure German, Swiss German, and two variants of English.
  (setq ispell-dictionary "en_US,ru_RU")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,ru_RU")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.hunspell_personal"))


(add-hook 'org-mode-hook 'flyspell-mode)

(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))

#+end_src
*** scratch
**** Запретить уничтожение буфера *scratch*
#+begin_src emacs-lisp :lexical no
  (use-package unkillable-scratch
    :straight t
    :ensure t
    :config (unkillable-scratch t))
#+end_src
**** сделать временной буфер для каждого файла
#+begin_src emacs-lisp :lexical no
  (use-package scratch-palette
      :straight t
               :ensure t
               :bind ("C-c s" . scratch-palette-popup))
#+end_src
**** Скретч-буфер, который длится вечно.
#+begin_src emacs-lisp :lexical no
  (use-package everlasting-scratch
  :straight t
               :ensure t
               :config  (add-hook 'after-init-hook 'everlasting-scratch-mode))
#+end_src
*** org-mode
**** Org-mode
#+begin_src emacs-lisp
    (use-package org
    :straight t
      :ensure t
      :bind (("C-c l" . org-store-link)
	 ("C-c a" . org-agenda)
	 ("C-c c" . org-capture))
      :config 
    (setq org-directory DOCUMENTS_DIR)
      (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
      (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))
      ;; prettify
      ;; (setq org-hide-macro-markers t
      ;;       org-hide-emphasis-markers t
      ;;       org-adapt-indentation t
      ;;       org-hide-leading-stars t
      ;;       org-odd-levels-only t
      ;;       org-reverse-note-order t
      ;;       org-use-speed-commands t)
      ;; org archive
      (setq org-archive-location (concat "archive/"
					 (format-time-string "%Y-%m" (current-time))
					 "_%s_archive::"))
      ;; org persist
      ;;(setq org-persist-directory (concat user-emacs-directory "var/org/persist/"))
      ;; org modules
      (setq org-modules '(ol-w3m
			  ol-bbdb
			  ol-bibtex
			  ol-docview
			  ol-gnus
			  ol-info
			  ol-irc
			  ol-mhe
			  ol-rmail
			  ol-eww))
      
      (setq org-default-notes-file (concat org-directory "/tasks.org")) 
       (setq org-src-fontify-natively t
	    org-src-tab-acts-natively t
	    org-export-with-smart-quotes t
	    org-ascii-links-to-notes nil
	    org-ascii-headline-spacing (quote (1 . 1))
	    org-html-coding-system 'utf-8-unix
	    org-html-validation-link nil
	    org-html-table-default-attributes
	  '(:border "0" :cellspacing "0" :cellpadding "6" :rules "none" :frame "none"))
  )


#+end_src
**** plantUml
#+begin_src emacs-lisp
(setq org-plantuml-jar-path (expand-file-name "bin/plantuml.jar" user-emacs-directory))
;;(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
#+end_src
**** org-babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '(
    (emacs-lisp . t)
    (lisp . t)
    (plantuml . t)
    (org . t)
    (shell . t)
    (C . t)
    (python . t)
    (dot . t)
    (awk . t)
    ))
#+end_src

**** org-download
#+begin_src emacs-lisp
(use-package org-download
:straight t
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))
#+end_src
**** ref
#+begin_src emacs-lisp
(use-package org-ref :straight t)
#+end_src
**** TODO company-org-block
#+begin_src emacs-lisp
(use-package company-org-block
:straight t
  :ensure t
  :custom
  (company-org-block-edit-style 'auto) ;; 'auto, 'prompt, or 'inline
  :hook ((org-mode . (lambda ()
                       (setq-local company-backends '(company-org-block))
                       (company-mode +1)))))
#+end_src 

**** elegant-agenda-mode
#+begin_src emacs-lisp
  (use-package elegant-agenda-mode
  :straight t
     :ensure t
     :hook org-agenda-mode-hook
     :config
     (setq org-agenda-custom-commands
      '(("d" "Today"
         ((tags-todo "SCHEDULED<\"<+1d>\"&PRIORITY=\"A\""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-span 'day)
                      (org-scheduled-delay-days -14)
                      (org-agenda-overriding-header "Schedule")))
          (tags-todo "SCHEDULED<\"<+1d>\""
                     ((org-agenda-skip-function
                       '(or (org-agenda-skip-entry-if 'done)
                            (air-org-skip-subtree-if-priority ?A)))
                      (org-agenda-overriding-header "Tasks:")))))))
  )
#+end_src
**** org-babel-eval-in-repl
#+begin_src emacs-lisp 
  (use-package org-babel-eval-in-repl
  :straight t
      :ensure t
      :bind (("C-<return>" . ober-eval-in-repl)
             ("M-<return>" . ober-eval-block-in-repl))
      :config
      )
#+end_src
**** org-board
#+begin_src emacs-lisp :lexical no
  (use-package org-board
  :straight t
      :ensure t)
#+end_src
**** org-pdftools
#+begin_src emacs-lisp 
  (use-package pdf-tools
  :straight t
  :ensure t
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
  :custom
  (pdf-annot-activate-created-annotations t "automatically annotate highlights"))
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
  TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

  (use-package org-noter-pdftools
  :straight t
      :after org-noter)

#+end_src
**** org-noter
#+begin_src emacs-lisp :lexical no
  (use-package org-noter
  :straight t
      :after org
      :config
    ;; Your org-noter config ........
      (require 'org-noter-pdftools))
#+end_src
**** org-cliplink
#+begin_src emacs-lisp :lexical no
  (use-package org-cliplink
  :straight t
      :ensure t
      :bind ("C-x p i" . org-cliplink))
#+end_src
**** org-habit-stats
#+begin_src emacs-lisp :lexical no
  (use-package org-habit-stats
  :straight t
      :ensure t
      :config (add-hook 'org-after-todo-state-change-hook 'org-habit-stats-update-properties))
#+end_src
**** org-generate
#+begin_src emacs-lisp :lexical no
  (use-package org-generate
  :straight t
      :ensure t)
#+end_src
**** org-capture
#+begin_src emacs-lisp
  (setq org-capture-templates
     '(("K" "Cliplink capture task" entry (file "")
        "* TODO %(org-cliplink-capture) \n  SCHEDULED: %t\n" :empty-lines 1)

       ))

#+end_src
**** org-clock-reminder
#+begin_src emacs-lisp :lexical no
  (use-package org-clock-reminder
  :straight t
    :config (org-clock-reminder-mode))
#+end_src
**** org-sidebar
#+begin_src emacs-lisp :lexical no
  (use-package org-sidebar
  :straight t
      :ensure t
      :bind ("C-c <f8>" . org-sidebar-tree))
#+end_src
*** org-roam
**** roam
#+begin_src emacs-lisp
(setq user-home-notes (concat DOCUMENTS_DIR "2brain"))
(use-package org-roam
:straight t
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-dailies-directory "daily/")

  (org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
  (org-roam-directory user-home-notes)
  (org-roam-completion-everywhere t)
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %<%I:%M %p>: %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
  (require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode)
  (require 'org-roam-export))

(use-package websocket
:straight t
    :ensure t
    :after org-roam)

(use-package org-roam-ui
:straight t
    :after org-roam
    :ensure t
    :config
(setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t)
)
#+end_src

**** vulpea
#+begin_src emacs-lisp :lexical no
  (use-package vulpea
  :straight t
    :ensure t
    ;; hook into org-roam-db-autosync-mode you wish to enable
    ;; persistence of meta values (see respective section in README to
    ;; find out what meta means)
    :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))
#+end_src
*** deft
#+begin_src emacs-lisp :lexical no
  (use-package deft
  :straight t
      :ensure t
      :bind (("C-<f6>" . deft-find-file)
             ("<f6>" . deft))
      :config 
      (setq deft-default-extension "org")
      (setq deft-extensions '("org"))
      (setq deft-directory (concat DOCUMENTS_DIR "notes"))
      (setq deft-recursive t)
      (setq deft-use-filename-as-title nil)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-file-naming-rules '((noslash . "-")
                                     (nospace . "-")
                                     (case-fn . downcase)))
      (setq deft-text-mode 'org-mode)
      )
#+end_src
*** bibtex
#+begin_src emacs-lisp
(setq
completion-bibliography '("/home/elf/Documents/BOOK/BOOK.bib")
completion-library-path '("/home/elf/Documents/BOOK/pdfs")
completion-notes-path '("/home/elf/Documents/BOOK/notes")
bibtex-file-path completion-notes-path)

(setq bibtex-completion-bibliography completion-bibliography
      bibtex-completion-library-path completion-library-path
      bibtex-completion-notes-path completion-notes-path
      bibtex-completion-find-additional-pdfs t
      bibtex-completion-pdf-extension '(".pdf" ".html" ".epub" )
      bibtex-dialect 'biblatex
      bibtex-file-path bibtex-file-path
      bibtex-files '(bibtex-file-path)
      bibtex-autokey-year-length 0
      bibtex-autokey-names 2
      bibtex-autokey-names-stretch 1
      bibtex-autokey-additional-names "EtAl"
      bibtex-autokey-name-case-convert-function 'capitalize
      bibtex-autokey-name-year-separator nil
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator ""
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length "infnty"
      bibtex-autokey-titleword-case-convert-function 'capitalize
      bibtex-autokey-before-presentation-function 'xah-asciify-string)


(use-package marginalia
:straight t
  :ensure t
  :config
  (marginalia-mode))

(use-package ebib
:straight t
    :ensure t
    :config
    (org-add-link-type "ebib" 'ebib)
)

;;; EBIB
(setq
keywords-file '("/home/elf/Documents/BOOK/notes"))
(setq ebib-bibtex-dialect 'biblatex
      ebib-preload-bib-files completion-bibliography
      ebib-use-timestamp t ;; todo customize on export info:ebib#Timestamps
      ebib-file-search-dirs completion-library-path
      ebib-notes-directory completion-notes-path
      ebib-notes-storage 'one-file-per-note
      ebib-notes-locations completion-notes-path
      ebib-notes-default-file nil 
      ebib-keywords-file keywords-file
      ebib-keywords-field-keep-sorted t
      ebib-keywords-file-save-on-exit 'always
      ebib-notes-show-note-method 'top-lines
      ebib-notes-display-max-lines 300
      ebib-popup-entry-window nil ;; no effect unless ebib-layout set to ’index-only
      ebib-layout 'index-only)


(use-package citar
:straight t
  :no-require
  :custom
  (org-cite-global-bibliography completion-bibliography)
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))


#+end_src
*** Theme и визуализация
**** Заставка при старте
#+begin_src emacs-lisp
(use-package dashboard
:straight t
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+end_src
**** Icons
#+begin_src emacs-lisp
      (use-package all-the-icons
      :straight t
	:demand t)

    (use-package all-the-icons-dired
    :straight t
      :after all-the-icons
      :hook (dired-mode . all-the-icons-dired-mode))

  
  (use-package all-the-icons-completion
  :straight t
    :defer 1
    :after all-the-icons
    :config
    (add-hook 'marginalia-mode-hook
	      #'all-the-icons-completion-marginalia-setup)
    (all-the-icons-completion-mode 1))
  
#+end_src
**** Fonts
#+begin_src emacs-lisp
  (ignore-errors (set-frame-font "DroidSansMon"))

  (cond

   ((member "Monaco" (font-family-list))
    (set-face-attribute 'default nil :font "Monaco-12"))
   ((member "Inconsolata" (font-family-list))
    (set-face-attribute 'default nil :font "Inconsolata-12"))
   ((member "Consolas" (font-family-list))
    (set-face-attribute 'default nil :font "Consolas-12"))
   ((member "DejaVu Sans Mono" (font-family-list))
    (set-face-attribute 'default nil :font "DejaVu Sans Mono-12"))
   )


#+end_src
**** Цветовая тема
#+begin_src emacs-lisp
  (use-package doom-themes
  :straight t
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src
**** mode-line
#+begin_src emacs-lisp
  (use-package doom-modeline
  :straight t
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
**** centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
  :straight t
  :config
  (centaur-tabs-mode t)
  :custom
  (centaur-tabs-set-icons nil)
  (centaur-tabs-show-new-tab-button nil)
  (centaur-tabs-set-close-button nil)
  (centaur-tabs-enable-ido-completion nil)

  :bind
  (("s-{" . #'centaur-tabs-backward)
   ("s-}" . #'centaur-tabs-forward)))

(use-package vertico
:straight t
  :config
  (vertico-mode)
  ;;(vertico-mouse-mode)
  :custom
  (vertico-count 22)
  :bind (:map vertico-map
              ("C-'"       . #'vertico-quick-exit)
              ;; Have to rebind this because C-m is translated to RET.
              ("<return>"  . #'exit-minibuffer)
              ("C-m"       . #'vertico-insert)
              ("C-c SPC"   . #'vertico-quick-exit)
              ("DEL"       . #'vertico-directory-delete-char)))
#+end_src
**** comment-tags
#+begin_src emacs-lisp
(use-package comment-tags
:straight t
    :ensure t
    :config (add-hook 'prog-mode-hook 'comment-tags-mode)
)
#+end_src
**** org-mode theme
#+begin_src emacs-lisp
    (font-lock-add-keywords 'org-mode
                '(("^ *\\([-]\\) "
                   (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    (setq org-ellipsis " ⇱"
      org-hide-emphasis-markers t)

    (setq org-hide-emphasis-markers t)

    ;;(custom-theme-set-faces
    ;; 'user
    ;; '(variable-pitch ((t (:family "ETBembo" :height 120 :weight thin))))
    ;; '(fixed-pitch ((t ( :family "FiraCode-VariableFont_wght" :height 120)))))


    (use-package org-bullets
    :straight t
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒" "➓")))

    (let* ((variable-tuple
        (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
          ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
          ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
          ((x-list-fonts "Verdana")         '(:font "Verdana"))
          ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
          (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
  
      (custom-theme-set-faces
       'user
       `(org-level-8 ((t (,@headline ,@variable-tuple))))
       `(org-level-7 ((t (,@headline ,@variable-tuple))))
       `(org-level-6 ((t (,@headline ,@variable-tuple))))
       `(org-level-5 ((t (,@headline ,@variable-tuple))))
       `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.15))))
       `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.15))))
       `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.25))))
       `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5 ))))
       `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  (use-package org-modern
  :straight t
      :ensure t
      :config
      (add-hook 'org-mode-hook #'org-modern-mode)
      (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

      ;; Option 2: Globally
      (setq org-modern-star nil)
      ;; (global-org-modern-mode)
  )
#+end_src
**** Цветные скобки
#+begin_src emacs-lisp
(use-package rainbow-delimiters
:straight t
  :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src
*** Навигация
**** Treemacs
#+begin_src emacs-lisp
    (use-package treemacs
    :straight t
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
        treemacs-deferred-git-apply-delay        0.5
        treemacs-directory-name-transformer      #'identity
        treemacs-display-in-side-window          t
        treemacs-eldoc-display                   'simple
        treemacs-file-event-delay                2000
        treemacs-file-extension-regex            treemacs-last-period-regex-value
        treemacs-file-follow-delay               0.2
        treemacs-file-name-transformer           #'identity
        treemacs-follow-after-init               t
        treemacs-expand-after-init               t
        treemacs-find-workspace-method           'find-for-file-or-pick-first
        treemacs-git-command-pipe                ""
        treemacs-goto-tag-strategy               'refetch-index
        treemacs-header-scroll-indicators        '(nil . "^^^^^^")
        treemacs-hide-dot-git-directory          t
        treemacs-indentation                     1
        treemacs-indentation-string              " "
        treemacs-is-never-other-window           nil
        treemacs-max-git-entries                 5000
        treemacs-missing-project-action          'ask
        treemacs-move-forward-on-expand          nil
        treemacs-no-png-images                   nil
        treemacs-no-delete-other-windows         t
        treemacs-project-follow-cleanup          nil
        treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-position                        'left
        treemacs-read-string-input               'from-child-frame
        treemacs-recenter-distance               0.1
        treemacs-recenter-after-file-follow      nil
        treemacs-recenter-after-tag-follow       nil
        treemacs-recenter-after-project-jump     'always
        treemacs-recenter-after-project-expand   'on-distance
        treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
        treemacs-project-follow-into-home        nil
        treemacs-show-cursor                     nil
        treemacs-show-hidden-files               t
        treemacs-silent-filewatch                nil
        treemacs-silent-refresh                  nil
        treemacs-sorting                         'alphabetic-asc
        treemacs-select-when-already-in-treemacs 'move-back
        treemacs-space-between-root-nodes        t
        treemacs-tag-follow-cleanup              t
        treemacs-tag-follow-delay                1.5
        treemacs-text-scale                      nil
        treemacs-user-mode-line-format           nil
        treemacs-user-header-line-format         nil
        treemacs-wide-toggle-width               70
        treemacs-width                           35
        treemacs-width-increment                 1
        treemacs-width-is-initially-locked       t
        treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
           (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
      ("M-0"       . treemacs-select-window)
      ("C-x t 1"   . treemacs-delete-other-windows)
      ("C-x t t"   . treemacs)
      ("<f8>"   . treemacs)
      ("C-x t d"   . treemacs-select-directory)
      ("C-x t B"   . treemacs-bookmark)
      ("C-x t C-t" . treemacs-find-file)
      ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
  :straight t
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
  :straight t
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
  :straight t
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
  :straight t
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :straight t
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :straight t
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

  (use-package treemacs-all-the-icons
  :straight t
    :defer 1
    :after all-the-icons treemacs
    :config
    (treemacs-load-theme "all-the-icons"))
#+end_src
**** vertico
#+begin_src emacs-lisp


(use-package consult
:straight t
  :config
  (defun pt/yank-pop ()
    "As pt/yank, but calling consult-yank-pop."
    (interactive)
    (let ((point-before (point)))
      (consult-yank-pop)
      (indent-region point-before (point))))

  :bind (("C-c i"   . #'consult-imenu)
         ("C-c b"   . #'consult-buffer)
         ("C-x b"   . #'consult-buffer)
         ("C-c r"   . #'consult-recent-file)
         ("C-c y"   . #'pt/yank-pop)
         ("C-c R"   . #'consult-bookmark)
         ("C-c `"   . #'consult-flymake)
         ("C-c h"   . #'consult-ripgrep)
         ("C-x C-f" . #'find-file)
         ("C-h a"   . #'consult-apropos)
         )
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  (consult-project-root-function #'deadgrep--project-root) ;; ensure ripgrep works
  )

(use-package marginalia
:straight t
  :config (marginalia-mode))

(use-package prescient
:straight t
  :config (prescient-persist-mode))

#+end_src
**** C-f find
#+begin_src emacs-lisp
(use-package ctrlf
:straight t
  :config (ctrlf-mode))
#+end_src
**** zoom-window
#+begin_src emacs-lisp :lexical no
  (use-package zoom-window
  :straight t
      :ensure t
      :bind ("C-c z" . zoom-window-zoom)
      :config (custom-set-variables
               '(zoom-window-mode-line-color "DarkGreen")))
#+end_src
**** Переключение между окнами
#+begin_src emacs-lisp :lexical no
  (global-set-key (kbd "C-<tab>") 'ace-window)
  (windmove-default-keybindings 'control)
#+end_src
**** Управление размерами окон
#+begin_src emacs-lisp :lexical no
  (global-set-key (kbd "S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-<down>") 'shrink-window)
  (global-set-key (kbd "S-<up>") 'enlarge-window)
#+end_src
*** RSS новости
#+begin_src emacs-lisp
  ;; Configure Elfeed
  (use-package elfeed
  :straight t
    :ensure t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))

; Configure Elfeed with org mode
  (use-package elfeed-org
  :straight t
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat user-emacs-directory "elfeed.org"))))

(use-package elfeed-tube
:straight t
  :ensure t ;; or :straight t
  :after elfeed
  :demand t
  :config
  ;; (setq elfeed-tube-auto-save-p nil) ; default value
  ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
  (elfeed-tube-setup)

  :bind (:map elfeed-show-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))

(use-package elfeed-tube-mpv
:straight t
  :ensure t ;; or :straight t
  :bind (:map elfeed-show-mode-map
              ("C-c C-f" . elfeed-tube-mpv-follow-mode)
              ("C-c C-w" . elfeed-tube-mpv-where)))

(use-package elfeed-goodies
:straight t
         :ensure t
         :config
         (require 'elfeed)
         (require 'elfeed-goodies)

         (elfeed-goodies/setup))
#+end_src
#+begin_src org :tangle elfeed.org
#+end_src
*** Браузер
#+begin_src emacs-lisp
	;;;;eww
      (setq
       browse-url-browser-function 'eww-browse-url ; Use eww as the default browser
       shr-use-fonts  nil                          ; No special fonts
       shr-use-colors nil                          ; No colours
       shr-indentation 2                           ; Left-side margin
       shr-width 70                                ; Fold text to 70 columns
       eww-search-prefix "https://google.ru")    ; Use another engine for searching

      (use-package markdown-preview-eww
      :straight t
	  :ensure t)

      (use-package org-preview-html
      :straight t
	:ensure t
	:bind ("C-c p " .  org-preview-html-mode))
#+end_src
*** Экрана для письма
#+begin_src emacs-lisp
  (use-package olivetti
  :straight t
    :ensure t
    :bind ("<f9>" . olivetti-mode))
#+end_src
*** Программирования
**** Run программ
#+begin_src emacs-lisp
(use-package quickrun
:straight t
    :ensure t
    :bind ("C-b" . quickrun)
    )
#+end_src
**** banner-comment
#+begin_src emacs-lisp
  (use-package banner-comment
  :straight t
  :commands (banner-comment)
  :bind ("C-c h" . banner-comment))
#+end_src
**** rust
#+begin_src emacs-lisp
  (use-package rustic
  :straight t
  :ensure t
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook)
  )

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))

(use-package dap-mode
:straight t
  :ensure t
  :config
  (dap-ui-mode)
  (dap-ui-controls-mode 1)

  (require 'dap-lldb)
  (require 'dap-gdb-lldb)
  ;; installs .extension/vscode
  (dap-gdb-lldb-setup)
  (dap-register-debug-template
   "Rust::LLDB Run Configuration"
   (list :type "lldb"
         :request "launch"
         :name "LLDB::Run"
	 :gdbpath "rust-lldb"
         :target nil
         :cwd nil)))

(use-package rust-playground :straight t :ensure t )

(use-package toml-mode :straight t :ensure t)


#+end_src
**** lisp
#+begin_src emacs-lisp

  
#+end_src
**** web
#+begin_src emacs-lisp
  (provide 'core-web)


(use-package scss-mode
:straight t
  :ensure t
  :config
  (autoload 'scss-mode "scss-mode")
  (add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode)))

(use-package web-mode
:straight t
  :ensure t
  :config
  ; с какими файлами ассоциировать web-mode
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

					; настройка отступов
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

; сниппеты и автозакрытие парных скобок
  (setq web-mode-extra-snippets '(("erb" . (("name" . ("beg" . "end"))))
                                  ))
  (setq web-mode-extra-auto-pairs '(("erb" . (("open" "close")))
                                    ))

; подсвечивать текущий элемент
  (setq web-mode-enable-current-element-highlight t))

;;; JS

(ensure-installed 'json-mode)

(use-package js2-mode :straight t :ensure t :defer 20
  :mode
  (("\\.js\\'" . js2-mode))
  :custom
  (js2-include-node-externs t)
  (js2-global-externs '("customElements"))
  (js2-highlight-level 3)
  (js2r-prefer-let-over-var t)
  (js2r-prefered-quote-type 2)
  (js-indent-align-list-continuation t)
  (global-auto-highlight-symbol-mode t)
  :config
  (setq js-indent-level 2)
  ;; patch in basic private field support
  (advice-add #'js2-identifier-start-p
            :after-until
            (lambda (c) (eq c ?#))))

(use-package js2-refactor :straight t :ensure t :defer 30
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-m"))





(use-package emmet-mode
:straight t
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    (add-hook 'web-mode-hook  'emmet-mode)
    (add-hook 'html-mode-hook  'emmet-mode)
    (add-hook 'js2-mode-hook  'emmet-mode)
    )


(use-package prodigy :straight t)
(prodigy-define-service
:name "dotfile org mode"
:command "python3"
:args '("-m" "http.server" "8000" "--bind" "127.0.0.1")
:cwd "/media/elf/FOREST_WORLD/MAGIC_SCHOOL/web"
:tags '(Магическая школа)
:stop-signal 'sigkill
:kill-process-buffer-on-stop t)

#+end_src

**** plantUml
#+begin_src emacs-lisp
  (use-package plantuml-mode
  :straight t
    :ensure t
    :config
    ;; Sample jar configuration
    (setq plantuml-jar-path (expand-file-name "bin/plantuml.jar" user-emacs-directory))
    (setq plantuml-default-exec-mode 'jar)
    ;; Enable plantuml-mode for PlantUML files
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (use-package flycheck-plantuml
        :ensure t
        :config
        (with-eval-after-load 'flycheck
            (require 'flycheck-plantuml)
            (flycheck-plantuml-setup)))
    )
#+end_src

**** lua
#+begin_src emacs-lisp :lexical no
  (use-package lua-mode
  :straight t
      :ensure t
      :config
       (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
       (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
       (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))

  (use-package luarocks :straight t :ensure t)
#+end_src
*** Авто комплит и lsp
**** Lsp
#+begin_src emacs-lisp
  (provide 'core-lsp)

(use-package lsp-mode
:straight t
  :hook ((js2-mode        . lsp-deferred)
         (js-mode         . lsp-deferred)
         (rjsx-mode       . lsp-deferred)
         (typescript-mode . lsp-deferred)
         (rust-mode       . lsp-deferred)
         (python-mode     . lsp-deferred)
         (ruby-mode       . lsp-deferred))
  :commands (lsp lsp-deferred)
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all nil)
  (lsp-idle-delay 0.6)
  (lsp-signature-render-documentation nil)
  (lsp-eldoc-enable-hover nil)
  ;; enable / disable the hints as you prefer:
  (lsp-rust-analyzer-server-display-inlay-hints nil)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  (lsp-rust-analyzer-display-chaining-hints nil)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints nil)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints nil)
  
  :config
  (setq lsp-enable-completion-at-point t))


(use-package lsp-ui
:straight t
  :after lsp-mode
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-enable t)
  (lsp-ui-sideline-enable t)
  (lsp-ui-flycheck-enable t)
  (lsp-ui-flycheck-live-reporting t)
  (lsp-ui-sideline-toggle-symbols-info t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-peek-enable t)
  
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)

  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-code-actions t)
  ;;(lsp-ui-doc-enable nil)

  )

(use-package eglot :straight t :ensure t)

(add-hook 'ja2-mode-hook 'lsp-mode)
(add-hook 'css-mode-hook 'lsp-mode)
(add-hook 'web-mode-hook 'lsp-mode)

(add-hook 'ja2-mode-hook 'lsp-ui-mode)
(add-hook 'css-mode-hook 'lsp-ui-mode)
(add-hook 'web-mode-hook 'lsp-ui-mode)
#+end_src
**** Company
#+begin_src emacs-lisp
  ;;(ensure-installed  'company-quickhelp 'slime-company)
  (use-package company
  :straight t
    :ensure t
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    (company-idle-delay
     (lambda () (if (company-in-string-or-comment) nil 0)))
    (company-selection-wrap-around t)
  
    :bind
    (:map company-active-map
	  ("C-n". company-select-next)
	  ("C-p". company-select-previous)
	  ("M-<". company-select-first)
	  ("M->". company-select-last))
    :config
    (company-quickhelp-mode 1)
    (setq company-quickhelp-delay 0.7
	  company-tooltip-align-annotations t)

    (global-company-mode)
    (push 'slime-company slime-contribs)
    )

  (add-hook 'lisp-interaction-mode 'company-mode)
  (add-hook 'lisp-mode 'company-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

#+end_src

*** Github
**** Сообщение
#+begin_src emacs-lisp :lexical no
  (use-package github-notifier
  :straight t
      :ensure t
      :config (github-notifier-mode 1))
#+end_src
*** Коммандная строка
#+begin_src emacs-lisp
(defun eshell/clear ()
  "clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun eshell-cwd ()
  "
  Sets the eshell directory to the current buffer

  Usage: M-x eshell-cwd 
  "
  (interactive)

  (let (
        (path (file-name-directory (or  (buffer-file-name) default-directory)))
       )

    (with-current-buffer "*eshell*"
      (cd path)
      (eshell-emit-prompt))))


(use-package load-bash-alias
:straight t
  :ensure t
  :config
  (setq load-bash-alias-bashrc-file "~/.aliases")
  (setq load-bash-alias-exclude-aliases-regexp "^alias magit\\|^alias oc"))

(use-package eshell-toggle
:straight t
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root nil)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
  :bind
  ("C-`"  .  eshell-toggle))

(use-package eshell-syntax-highlighting
:straight t
  :after eshell-mode
  :ensure t ;; Install if not already installed.
  :config
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode +1))

(use-package esh-autosuggest
:straight t
  :hook (eshell-mode . esh-autosuggest-mode)
  ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
  ;; line below instead:
  ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
  :ensure t)

(setq eshell-prompt-function
  (lambda ()
    (concat (format-time-string "❥|>>" (current-time))
      (if (= (user-uid) 0) " # " " $ "))))

#+end_src
*** calendar
#+begin_src emacs-lisp
(use-package calendar
:straight t
  :config
  (setq calendar-week-start-date 1)     ; Monday
  (setq calendar-date-style 'iso)

  (setq calendar-view-diary-initially-flag t)

  (setq calendar-mark-holidays-flag t)
  (setq calendar-mark-diary-entries-flag t)
  (setq diary-file (concat user-emacs-directory "diary"))

  (setq calendar-week-start-day 1
          calendar-day-name-array ["Воскресенье" "Понедельник" "Вторник" "Среда" 
                                   "Четверг" "Пятница" "Суббота"]
          calendar-day-header-array ["Вс" "Пн" "Вт" "Ср" "Чт" "Пт" "Сб"]
          calendar-day-abbrev-array ["Вск" "Пнд" "Втр" "Сре" "Чтв" "Птн" "Суб"]
          calendar-month-name-array ["Январь" "Февраль" "Март" "Апрель" "Май" 
                                     "Июнь" "Июль" "Август" "Сентябрь"
                                     "Октябрь" "Ноябрь" "Декабрь"]
          calendar-month-abbrev-array ["Янв" "Фев" "Мар" "Апр" "Май" "Июн" "Июл" "Авг" "Сен" "Окт" "Ноя" "Дек"])

  (setq calendar-holidays
        '((holiday-fixed 1 1 "New Year's Day")
          (holiday-float 1 1 3 "Martin Luther King Day")
          (holiday-fixed 2 14 "Valentine's Day")
          (holiday-fixed 3 17 "St. Patrick's Day")
          (holiday-float 5 0 2 "Mother's Day")
          (holiday-float 5 1 -1 "Memorial Day")
          (holiday-float 6 0 3 "Father's Day")
          (holiday-fixed 7 4 "Independence Day")
          (holiday-float 9 1 1 "Labor Day")
          (holiday-fixed 10 31 "Halloween")
          (holiday-float 11 4 4 "Thanksgiving")
          (holiday-easter-etc)
          (holiday-fixed 12 25 "Christmas")
          (holiday-fixed 1 6 "Epiphany")
          (holiday-fixed 8 15 "Assumption")
          (holiday-advent 0 "Advent")
          (solar-equinoxes-solstices)
          (holiday-sexp calendar-daylight-savings-starts
                        (format "Daylight Saving Time Begins %s"
                                (solar-time-string
                                 (/ calendar-daylight-savings-starts-time
                                    (float 60))
                                 calendar-standard-time-zone-name)))
          (holiday-sexp calendar-daylight-savings-ends
                        (format "Daylight Saving Time Ends %s"
                                (solar-time-string
                                 (/ calendar-daylight-savings-ends-time
                                    (float 60))
                                 calendar-daylight-time-zone-name)))))

  (setq diary-date-forms diary-iso-date-forms)
  (defalias 'diary-birthday #'diary-anniversary))
#+end_src

*** Меню hydra
**** Установка
#+begin_src emacs-lisp :lexical no
  (use-package major-mode-hydra
  :straight t
      :ensure t
      :bind
      ("<f10>" . major-mode-hydra))
#+end_src
**** emacs
#+begin_src emacs-lisp :lexical no
    (major-mode-hydra-define emacs-lisp-mode (:quit-key "q" :title " emacs")
      ("emacs-lisp"
       (("d" master-menu/body "Основное меню"))
       ))
#+end_src
**** org-mode
#+begin_src emacs-lisp :lexical no
   (major-mode-hydra-define org-mode (:quit-key "q" :title " org-mode")
      ("org-mode"
       (("d" master-menu/body "Основное меню"))
       ))
  
#+end_src
**** Главное меню не привязано к режимам *mode*
#+begin_src emacs-lisp :lexical no
  (pretty-hydra-define master-menu
    (:color amaranth :quit-key "q" :title " Основное меню")
    ("File"
     ()
     "Edit"
     ()
     "Buffers"
     ()
     "Windows"
     ()
     "Tools"
     ()
     "YASnippet"
     ()
     "Help"
    ))

#+end_src

*** Автоматизация




